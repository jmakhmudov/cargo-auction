import TeleBot from 'telebot';
import axios from 'axios';
import session from 'telebot-session-localstorage';

const bot = new TeleBot({
  token: process.env.BOT_TOKEN,
  polling: { interval: 1000, timeout: 0, limit: 100, retryTimeout: 5000 },
});

function isValidEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

function isValidPhoneNumber(phoneNumber) {
  const phoneRegex = /\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{1,14}$/;
  return phoneRegex.test(phoneNumber);
}

// Start command for registration
bot.on(['/start'], async (msg) => {
  const user = await checkReg(msg.from.id);

  if (user.detail) {
    bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
    bot.session = { step: 1 };
  } else {
    bot.sendMessage(msg.chat.id, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ${user.name}! –í—ã ${user.status ? "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∏ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–∞—Ö ‚úÖ" : "–ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç –∞–¥–º–∏–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ üïê"}`);
  }
});

// Command to check user status
bot.on(['/status'], async (msg) => {
  const user = await checkReg(msg.from.id);

  bot.sendMessage(msg.chat.id, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ${user.name}! –í—ã ${user.status ? "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∏ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–∞—Ö ‚úÖ" : "–ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç –∞–¥–º–∏–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ üïê"}`);
});

// Handling user input during the registration process
bot.on('text', async (msg) => {
  const { text } = msg;

  switch (bot.session.step) {
    case 1:
      bot.session.name = text;
      bot.sendMessage(msg.chat.id, `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ –∑–Ω–∞–∫–æ–º +): ${bot.session.step}`);
      bot.session.step++;
      break;
    case 2:
      if (isValidPhoneNumber(text)) {
        bot.session.telephone_num = text;
        bot.sendMessage(msg.chat.id, '–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:');
        bot.session.step++;
      } else {
        bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞! –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ –∑–Ω–∞–∫–æ–º +):');
      }
      break;
    case 3:
      // Step 3: Email
      if (isValidEmail(text)) {
        bot.session.email = text;
        bot.sendMessage(msg.chat.id, '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:');
        bot.session.step++;
      } else {
        bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:');
        bot.session.step = 3;
      }
      break;
    // Additional steps can be added as needed
    // ...
    case 6:
      // Step 6: Comment
      bot.session.comment = text;
      const telegramUserId = msg.from.id;

      // Add Telegram user ID to the JSON data
      bot.session.id = telegramUserId;

      // Complete registration and send data via API
      try {
        await sendRegistrationData(bot.session);
        bot.sendMessage(msg.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üïê');
      } catch (error) {
        console.error('Error sending data via API:', error);
        bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      } finally {
        // Reset the session after registration completion
        bot.session = null;
      }
      break;
    default:
      bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–æ–≤–∞.');
      bot.session = null;
      break;
  }
});

async function checkReg(id) {
  try {
    const response = await axios.get(`https://ovestellar.pythonanywhere.com/api/bot/tguser/${id}`, {
      headers: {
        Accept: 'application/json',
      },
    });

    return response.data;
  } catch (error) {
    // Check if the error is due to a 404 Not Found
    if (error.response && error.response.status === 404) {
      // User is not registered
      return { detail: 'User not registered' };
    } else {
      // Handle other errors
      console.error('Error checking registration:', error.message);
      throw error; // Propagate the error
    }
  }
}

// Function to send data via API
async function sendRegistrationData(data) {
  delete data.step;
  const apiUrl = 'https://ovestellar.pythonanywhere.com/api/bot/tguser-create/'; // Replace with the actual API endpoint
  console.log(data);
  // Send data using axios
  await axios.post(apiUrl, data);
}

// Start the bot
bot.start();
